
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace nTier.Entity
{
	public abstract class _Suppliers : SqlClientEntity
	{
		public _Suppliers()
		{
			this.QuerySource = "Suppliers";
			this.MappingName = "Suppliers";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SuppliersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int SupplierID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.SupplierID, SupplierID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SuppliersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter SupplierID
			{
				get
				{
					return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyName
			{
				get
				{
					return new SqlParameter("@CompanyName", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter ContactName
			{
				get
				{
					return new SqlParameter("@ContactName", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter ContactTitle
			{
				get
				{
					return new SqlParameter("@ContactTitle", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter Address
			{
				get
				{
					return new SqlParameter("@Address", SqlDbType.NVarChar, 60);
				}
			}
			
			public static SqlParameter City
			{
				get
				{
					return new SqlParameter("@City", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter Region
			{
				get
				{
					return new SqlParameter("@Region", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter PostalCode
			{
				get
				{
					return new SqlParameter("@PostalCode", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter Country
			{
				get
				{
					return new SqlParameter("@Country", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter Phone
			{
				get
				{
					return new SqlParameter("@Phone", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter Fax
			{
				get
				{
					return new SqlParameter("@Fax", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter HomePage
			{
				get
				{
					return new SqlParameter("@HomePage", SqlDbType.NText, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string SupplierID = "SupplierID";
            public const string CompanyName = "CompanyName";
            public const string ContactName = "ContactName";
            public const string ContactTitle = "ContactTitle";
            public const string Address = "Address";
            public const string City = "City";
            public const string Region = "Region";
            public const string PostalCode = "PostalCode";
            public const string Country = "Country";
            public const string Phone = "Phone";
            public const string Fax = "Fax";
            public const string HomePage = "HomePage";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SupplierID] = _Suppliers.PropertyNames.SupplierID;
					ht[CompanyName] = _Suppliers.PropertyNames.CompanyName;
					ht[ContactName] = _Suppliers.PropertyNames.ContactName;
					ht[ContactTitle] = _Suppliers.PropertyNames.ContactTitle;
					ht[Address] = _Suppliers.PropertyNames.Address;
					ht[City] = _Suppliers.PropertyNames.City;
					ht[Region] = _Suppliers.PropertyNames.Region;
					ht[PostalCode] = _Suppliers.PropertyNames.PostalCode;
					ht[Country] = _Suppliers.PropertyNames.Country;
					ht[Phone] = _Suppliers.PropertyNames.Phone;
					ht[Fax] = _Suppliers.PropertyNames.Fax;
					ht[HomePage] = _Suppliers.PropertyNames.HomePage;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string SupplierID = "SupplierID";
            public const string CompanyName = "CompanyName";
            public const string ContactName = "ContactName";
            public const string ContactTitle = "ContactTitle";
            public const string Address = "Address";
            public const string City = "City";
            public const string Region = "Region";
            public const string PostalCode = "PostalCode";
            public const string Country = "Country";
            public const string Phone = "Phone";
            public const string Fax = "Fax";
            public const string HomePage = "HomePage";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SupplierID] = _Suppliers.ColumnNames.SupplierID;
					ht[CompanyName] = _Suppliers.ColumnNames.CompanyName;
					ht[ContactName] = _Suppliers.ColumnNames.ContactName;
					ht[ContactTitle] = _Suppliers.ColumnNames.ContactTitle;
					ht[Address] = _Suppliers.ColumnNames.Address;
					ht[City] = _Suppliers.ColumnNames.City;
					ht[Region] = _Suppliers.ColumnNames.Region;
					ht[PostalCode] = _Suppliers.ColumnNames.PostalCode;
					ht[Country] = _Suppliers.ColumnNames.Country;
					ht[Phone] = _Suppliers.ColumnNames.Phone;
					ht[Fax] = _Suppliers.ColumnNames.Fax;
					ht[HomePage] = _Suppliers.ColumnNames.HomePage;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string SupplierID = "s_SupplierID";
            public const string CompanyName = "s_CompanyName";
            public const string ContactName = "s_ContactName";
            public const string ContactTitle = "s_ContactTitle";
            public const string Address = "s_Address";
            public const string City = "s_City";
            public const string Region = "s_Region";
            public const string PostalCode = "s_PostalCode";
            public const string Country = "s_Country";
            public const string Phone = "s_Phone";
            public const string Fax = "s_Fax";
            public const string HomePage = "s_HomePage";

		}
		#endregion		
		
		#region Properties
	
		public virtual int? SupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.SupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.SupplierID, value);
			}
		}

		public virtual string CompanyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyName);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyName, value);
			}
		}

		public virtual string ContactName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactName);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactName, value);
			}
		}

		public virtual string ContactTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactTitle, value);
			}
		}

		public virtual string Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Address, value);
			}
		}

		public virtual string City
	    {
			get
	        {
				return base.Getstring(ColumnNames.City);
			}
			set
	        {
				base.Setstring(ColumnNames.City, value);
			}
		}

		public virtual string Region
	    {
			get
	        {
				return base.Getstring(ColumnNames.Region);
			}
			set
	        {
				base.Setstring(ColumnNames.Region, value);
			}
		}

		public virtual string PostalCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostalCode);
			}
			set
	        {
				base.Setstring(ColumnNames.PostalCode, value);
			}
		}

		public virtual string Country
	    {
			get
	        {
				return base.Getstring(ColumnNames.Country);
			}
			set
	        {
				base.Setstring(ColumnNames.Country, value);
			}
		}

		public virtual string Phone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone, value);
			}
		}

		public virtual string Fax
	    {
			get
	        {
				return base.Getstring(ColumnNames.Fax);
			}
			set
	        {
				base.Setstring(ColumnNames.Fax, value);
			}
		}

		public virtual string HomePage
	    {
			get
	        {
				return base.Getstring(ColumnNames.HomePage);
			}
			set
	        {
				base.Setstring(ColumnNames.HomePage, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_SupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SupplierID);
				else
					this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
			}
		}

		public virtual string s_CompanyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyName) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyName);
				else
					this.CompanyName = base.SetstringAsString(ColumnNames.CompanyName, value);
			}
		}

		public virtual string s_ContactName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactName) ? string.Empty : base.GetstringAsString(ColumnNames.ContactName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactName);
				else
					this.ContactName = base.SetstringAsString(ColumnNames.ContactName, value);
			}
		}

		public virtual string s_ContactTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactTitle) ? string.Empty : base.GetstringAsString(ColumnNames.ContactTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactTitle);
				else
					this.ContactTitle = base.SetstringAsString(ColumnNames.ContactTitle, value);
			}
		}

		public virtual string s_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address) ? string.Empty : base.GetstringAsString(ColumnNames.Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address);
				else
					this.Address = base.SetstringAsString(ColumnNames.Address, value);
			}
		}

		public virtual string s_City
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.City) ? string.Empty : base.GetstringAsString(ColumnNames.City);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.City);
				else
					this.City = base.SetstringAsString(ColumnNames.City, value);
			}
		}

		public virtual string s_Region
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Region) ? string.Empty : base.GetstringAsString(ColumnNames.Region);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Region);
				else
					this.Region = base.SetstringAsString(ColumnNames.Region, value);
			}
		}

		public virtual string s_PostalCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostalCode) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCode);
				else
					this.PostalCode = base.SetstringAsString(ColumnNames.PostalCode, value);
			}
		}

		public virtual string s_Country
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Country) ? string.Empty : base.GetstringAsString(ColumnNames.Country);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Country);
				else
					this.Country = base.SetstringAsString(ColumnNames.Country, value);
			}
		}

		public virtual string s_Phone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone) ? string.Empty : base.GetstringAsString(ColumnNames.Phone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone);
				else
					this.Phone = base.SetstringAsString(ColumnNames.Phone, value);
			}
		}

		public virtual string s_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fax) ? string.Empty : base.GetstringAsString(ColumnNames.Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fax);
				else
					this.Fax = base.SetstringAsString(ColumnNames.Fax, value);
			}
		}

		public virtual string s_HomePage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomePage) ? string.Empty : base.GetstringAsString(ColumnNames.HomePage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomePage);
				else
					this.HomePage = base.SetstringAsString(ColumnNames.HomePage, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter SupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactName, Parameters.ContactName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactTitle, Parameters.ContactTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter City
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Region
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Region, Parameters.Region);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostalCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostalCode, Parameters.PostalCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Country
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Country, Parameters.Country);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone, Parameters.Phone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomePage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomePage, Parameters.HomePage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public WhereParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public WhereParameter ContactName
		    {
				get
		        {
					if(_ContactName_W == null)
	        	    {
						_ContactName_W = TearOff.ContactName;
					}
					return _ContactName_W;
				}
			}

			public WhereParameter ContactTitle
		    {
				get
		        {
					if(_ContactTitle_W == null)
	        	    {
						_ContactTitle_W = TearOff.ContactTitle;
					}
					return _ContactTitle_W;
				}
			}

			public WhereParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter Region
		    {
				get
		        {
					if(_Region_W == null)
	        	    {
						_Region_W = TearOff.Region;
					}
					return _Region_W;
				}
			}

			public WhereParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public WhereParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public WhereParameter Phone
		    {
				get
		        {
					if(_Phone_W == null)
	        	    {
						_Phone_W = TearOff.Phone;
					}
					return _Phone_W;
				}
			}

			public WhereParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public WhereParameter HomePage
		    {
				get
		        {
					if(_HomePage_W == null)
	        	    {
						_HomePage_W = TearOff.HomePage;
					}
					return _HomePage_W;
				}
			}

			private WhereParameter _SupplierID_W = null;
			private WhereParameter _CompanyName_W = null;
			private WhereParameter _ContactName_W = null;
			private WhereParameter _ContactTitle_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _Region_W = null;
			private WhereParameter _PostalCode_W = null;
			private WhereParameter _Country_W = null;
			private WhereParameter _Phone_W = null;
			private WhereParameter _Fax_W = null;
			private WhereParameter _HomePage_W = null;

			public void WhereClauseReset()
			{
				_SupplierID_W = null;
				_CompanyName_W = null;
				_ContactName_W = null;
				_ContactTitle_W = null;
				_Address_W = null;
				_City_W = null;
				_Region_W = null;
				_PostalCode_W = null;
				_Country_W = null;
				_Phone_W = null;
				_Fax_W = null;
				_HomePage_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter SupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactName, Parameters.ContactName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactTitle, Parameters.ContactTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter City
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Region
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Region, Parameters.Region);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostalCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostalCode, Parameters.PostalCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Country
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Country, Parameters.Country);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone, Parameters.Phone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomePage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomePage, Parameters.HomePage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public AggregateParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public AggregateParameter ContactName
		    {
				get
		        {
					if(_ContactName_W == null)
	        	    {
						_ContactName_W = TearOff.ContactName;
					}
					return _ContactName_W;
				}
			}

			public AggregateParameter ContactTitle
		    {
				get
		        {
					if(_ContactTitle_W == null)
	        	    {
						_ContactTitle_W = TearOff.ContactTitle;
					}
					return _ContactTitle_W;
				}
			}

			public AggregateParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public AggregateParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public AggregateParameter Region
		    {
				get
		        {
					if(_Region_W == null)
	        	    {
						_Region_W = TearOff.Region;
					}
					return _Region_W;
				}
			}

			public AggregateParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public AggregateParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public AggregateParameter Phone
		    {
				get
		        {
					if(_Phone_W == null)
	        	    {
						_Phone_W = TearOff.Phone;
					}
					return _Phone_W;
				}
			}

			public AggregateParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public AggregateParameter HomePage
		    {
				get
		        {
					if(_HomePage_W == null)
	        	    {
						_HomePage_W = TearOff.HomePage;
					}
					return _HomePage_W;
				}
			}

			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _CompanyName_W = null;
			private AggregateParameter _ContactName_W = null;
			private AggregateParameter _ContactTitle_W = null;
			private AggregateParameter _Address_W = null;
			private AggregateParameter _City_W = null;
			private AggregateParameter _Region_W = null;
			private AggregateParameter _PostalCode_W = null;
			private AggregateParameter _Country_W = null;
			private AggregateParameter _Phone_W = null;
			private AggregateParameter _Fax_W = null;
			private AggregateParameter _HomePage_W = null;

			public void AggregateClauseReset()
			{
				_SupplierID_W = null;
				_CompanyName_W = null;
				_ContactName_W = null;
				_ContactTitle_W = null;
				_Address_W = null;
				_City_W = null;
				_Region_W = null;
				_PostalCode_W = null;
				_Country_W = null;
				_Phone_W = null;
				_Fax_W = null;
				_HomePage_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SuppliersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.SupplierID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SuppliersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SuppliersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyName);
			p.SourceColumn = ColumnNames.CompanyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactName);
			p.SourceColumn = ColumnNames.ContactName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactTitle);
			p.SourceColumn = ColumnNames.ContactTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address);
			p.SourceColumn = ColumnNames.Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.City);
			p.SourceColumn = ColumnNames.City;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Region);
			p.SourceColumn = ColumnNames.Region;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostalCode);
			p.SourceColumn = ColumnNames.PostalCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Country);
			p.SourceColumn = ColumnNames.Country;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone);
			p.SourceColumn = ColumnNames.Phone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Fax);
			p.SourceColumn = ColumnNames.Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomePage);
			p.SourceColumn = ColumnNames.HomePage;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
