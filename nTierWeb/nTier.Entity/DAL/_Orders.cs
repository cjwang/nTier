
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace nTier.Entity
{
	public abstract class _Orders : SqlClientEntity
	{
		public _Orders()
		{
			this.QuerySource = "Orders";
			this.MappingName = "Orders";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrdersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int OrderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.OrderID, OrderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrdersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CustomerID
			{
				get
				{
					return new SqlParameter("@CustomerID", SqlDbType.NChar, 5);
				}
			}
			
			public static SqlParameter EmployeeID
			{
				get
				{
					return new SqlParameter("@EmployeeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderDate
			{
				get
				{
					return new SqlParameter("@OrderDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RequiredDate
			{
				get
				{
					return new SqlParameter("@RequiredDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ShippedDate
			{
				get
				{
					return new SqlParameter("@ShippedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ShipVia
			{
				get
				{
					return new SqlParameter("@ShipVia", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Freight
			{
				get
				{
					return new SqlParameter("@Freight", SqlDbType.Money, 0);
				}
			}
			
			public static SqlParameter ShipName
			{
				get
				{
					return new SqlParameter("@ShipName", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter ShipAddress
			{
				get
				{
					return new SqlParameter("@ShipAddress", SqlDbType.NVarChar, 60);
				}
			}
			
			public static SqlParameter ShipCity
			{
				get
				{
					return new SqlParameter("@ShipCity", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter ShipRegion
			{
				get
				{
					return new SqlParameter("@ShipRegion", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter ShipPostalCode
			{
				get
				{
					return new SqlParameter("@ShipPostalCode", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter ShipCountry
			{
				get
				{
					return new SqlParameter("@ShipCountry", SqlDbType.NVarChar, 15);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string OrderID = "OrderID";
            public const string CustomerID = "CustomerID";
            public const string EmployeeID = "EmployeeID";
            public const string OrderDate = "OrderDate";
            public const string RequiredDate = "RequiredDate";
            public const string ShippedDate = "ShippedDate";
            public const string ShipVia = "ShipVia";
            public const string Freight = "Freight";
            public const string ShipName = "ShipName";
            public const string ShipAddress = "ShipAddress";
            public const string ShipCity = "ShipCity";
            public const string ShipRegion = "ShipRegion";
            public const string ShipPostalCode = "ShipPostalCode";
            public const string ShipCountry = "ShipCountry";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[OrderID] = _Orders.PropertyNames.OrderID;
					ht[CustomerID] = _Orders.PropertyNames.CustomerID;
					ht[EmployeeID] = _Orders.PropertyNames.EmployeeID;
					ht[OrderDate] = _Orders.PropertyNames.OrderDate;
					ht[RequiredDate] = _Orders.PropertyNames.RequiredDate;
					ht[ShippedDate] = _Orders.PropertyNames.ShippedDate;
					ht[ShipVia] = _Orders.PropertyNames.ShipVia;
					ht[Freight] = _Orders.PropertyNames.Freight;
					ht[ShipName] = _Orders.PropertyNames.ShipName;
					ht[ShipAddress] = _Orders.PropertyNames.ShipAddress;
					ht[ShipCity] = _Orders.PropertyNames.ShipCity;
					ht[ShipRegion] = _Orders.PropertyNames.ShipRegion;
					ht[ShipPostalCode] = _Orders.PropertyNames.ShipPostalCode;
					ht[ShipCountry] = _Orders.PropertyNames.ShipCountry;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string OrderID = "OrderID";
            public const string CustomerID = "CustomerID";
            public const string EmployeeID = "EmployeeID";
            public const string OrderDate = "OrderDate";
            public const string RequiredDate = "RequiredDate";
            public const string ShippedDate = "ShippedDate";
            public const string ShipVia = "ShipVia";
            public const string Freight = "Freight";
            public const string ShipName = "ShipName";
            public const string ShipAddress = "ShipAddress";
            public const string ShipCity = "ShipCity";
            public const string ShipRegion = "ShipRegion";
            public const string ShipPostalCode = "ShipPostalCode";
            public const string ShipCountry = "ShipCountry";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[OrderID] = _Orders.ColumnNames.OrderID;
					ht[CustomerID] = _Orders.ColumnNames.CustomerID;
					ht[EmployeeID] = _Orders.ColumnNames.EmployeeID;
					ht[OrderDate] = _Orders.ColumnNames.OrderDate;
					ht[RequiredDate] = _Orders.ColumnNames.RequiredDate;
					ht[ShippedDate] = _Orders.ColumnNames.ShippedDate;
					ht[ShipVia] = _Orders.ColumnNames.ShipVia;
					ht[Freight] = _Orders.ColumnNames.Freight;
					ht[ShipName] = _Orders.ColumnNames.ShipName;
					ht[ShipAddress] = _Orders.ColumnNames.ShipAddress;
					ht[ShipCity] = _Orders.ColumnNames.ShipCity;
					ht[ShipRegion] = _Orders.ColumnNames.ShipRegion;
					ht[ShipPostalCode] = _Orders.ColumnNames.ShipPostalCode;
					ht[ShipCountry] = _Orders.ColumnNames.ShipCountry;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string OrderID = "s_OrderID";
            public const string CustomerID = "s_CustomerID";
            public const string EmployeeID = "s_EmployeeID";
            public const string OrderDate = "s_OrderDate";
            public const string RequiredDate = "s_RequiredDate";
            public const string ShippedDate = "s_ShippedDate";
            public const string ShipVia = "s_ShipVia";
            public const string Freight = "s_Freight";
            public const string ShipName = "s_ShipName";
            public const string ShipAddress = "s_ShipAddress";
            public const string ShipCity = "s_ShipCity";
            public const string ShipRegion = "s_ShipRegion";
            public const string ShipPostalCode = "s_ShipPostalCode";
            public const string ShipCountry = "s_ShipCountry";

		}
		#endregion		
		
		#region Properties
	
		public virtual int? OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual string CustomerID
	    {
			get
	        {
				return base.Getstring(ColumnNames.CustomerID);
			}
			set
	        {
				base.Setstring(ColumnNames.CustomerID, value);
			}
		}

		public virtual int? EmployeeID
	    {
			get
	        {
				return base.Getint(ColumnNames.EmployeeID);
			}
			set
	        {
				base.Setint(ColumnNames.EmployeeID, value);
			}
		}

		public virtual DateTime? OrderDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.OrderDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.OrderDate, value);
			}
		}

		public virtual DateTime? RequiredDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RequiredDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RequiredDate, value);
			}
		}

		public virtual DateTime? ShippedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ShippedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ShippedDate, value);
			}
		}

		public virtual int? ShipVia
	    {
			get
	        {
				return base.Getint(ColumnNames.ShipVia);
			}
			set
	        {
				base.Setint(ColumnNames.ShipVia, value);
			}
		}

		public virtual decimal? Freight
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Freight);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Freight, value);
			}
		}

		public virtual string ShipName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShipName);
			}
			set
	        {
				base.Setstring(ColumnNames.ShipName, value);
			}
		}

		public virtual string ShipAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShipAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.ShipAddress, value);
			}
		}

		public virtual string ShipCity
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShipCity);
			}
			set
	        {
				base.Setstring(ColumnNames.ShipCity, value);
			}
		}

		public virtual string ShipRegion
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShipRegion);
			}
			set
	        {
				base.Setstring(ColumnNames.ShipRegion, value);
			}
		}

		public virtual string ShipPostalCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShipPostalCode);
			}
			set
	        {
				base.Setstring(ColumnNames.ShipPostalCode, value);
			}
		}

		public virtual string ShipCountry
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShipCountry);
			}
			set
	        {
				base.Setstring(ColumnNames.ShipCountry, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_CustomerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CustomerID) ? string.Empty : base.GetstringAsString(ColumnNames.CustomerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CustomerID);
				else
					this.CustomerID = base.SetstringAsString(ColumnNames.CustomerID, value);
			}
		}

		public virtual string s_EmployeeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmployeeID) ? string.Empty : base.GetintAsString(ColumnNames.EmployeeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmployeeID);
				else
					this.EmployeeID = base.SetintAsString(ColumnNames.EmployeeID, value);
			}
		}

		public virtual string s_OrderDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.OrderDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderDate);
				else
					this.OrderDate = base.SetDateTimeAsString(ColumnNames.OrderDate, value);
			}
		}

		public virtual string s_RequiredDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequiredDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RequiredDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequiredDate);
				else
					this.RequiredDate = base.SetDateTimeAsString(ColumnNames.RequiredDate, value);
			}
		}

		public virtual string s_ShippedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShippedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ShippedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShippedDate);
				else
					this.ShippedDate = base.SetDateTimeAsString(ColumnNames.ShippedDate, value);
			}
		}

		public virtual string s_ShipVia
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipVia) ? string.Empty : base.GetintAsString(ColumnNames.ShipVia);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipVia);
				else
					this.ShipVia = base.SetintAsString(ColumnNames.ShipVia, value);
			}
		}

		public virtual string s_Freight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Freight) ? string.Empty : base.GetdecimalAsString(ColumnNames.Freight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Freight);
				else
					this.Freight = base.SetdecimalAsString(ColumnNames.Freight, value);
			}
		}

		public virtual string s_ShipName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipName) ? string.Empty : base.GetstringAsString(ColumnNames.ShipName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipName);
				else
					this.ShipName = base.SetstringAsString(ColumnNames.ShipName, value);
			}
		}

		public virtual string s_ShipAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipAddress) ? string.Empty : base.GetstringAsString(ColumnNames.ShipAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipAddress);
				else
					this.ShipAddress = base.SetstringAsString(ColumnNames.ShipAddress, value);
			}
		}

		public virtual string s_ShipCity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipCity) ? string.Empty : base.GetstringAsString(ColumnNames.ShipCity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipCity);
				else
					this.ShipCity = base.SetstringAsString(ColumnNames.ShipCity, value);
			}
		}

		public virtual string s_ShipRegion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipRegion) ? string.Empty : base.GetstringAsString(ColumnNames.ShipRegion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipRegion);
				else
					this.ShipRegion = base.SetstringAsString(ColumnNames.ShipRegion, value);
			}
		}

		public virtual string s_ShipPostalCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipPostalCode) ? string.Empty : base.GetstringAsString(ColumnNames.ShipPostalCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipPostalCode);
				else
					this.ShipPostalCode = base.SetstringAsString(ColumnNames.ShipPostalCode, value);
			}
		}

		public virtual string s_ShipCountry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShipCountry) ? string.Empty : base.GetstringAsString(ColumnNames.ShipCountry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipCountry);
				else
					this.ShipCountry = base.SetstringAsString(ColumnNames.ShipCountry, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CustomerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CustomerID, Parameters.CustomerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmployeeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmployeeID, Parameters.EmployeeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderDate, Parameters.OrderDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequiredDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequiredDate, Parameters.RequiredDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShippedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShippedDate, Parameters.ShippedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipVia
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipVia, Parameters.ShipVia);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Freight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Freight, Parameters.Freight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipName, Parameters.ShipName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipAddress, Parameters.ShipAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipCity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipCity, Parameters.ShipCity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipRegion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipRegion, Parameters.ShipRegion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipPostalCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipPostalCode, Parameters.ShipPostalCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShipCountry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShipCountry, Parameters.ShipCountry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter CustomerID
		    {
				get
		        {
					if(_CustomerID_W == null)
	        	    {
						_CustomerID_W = TearOff.CustomerID;
					}
					return _CustomerID_W;
				}
			}

			public WhereParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public WhereParameter OrderDate
		    {
				get
		        {
					if(_OrderDate_W == null)
	        	    {
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public WhereParameter RequiredDate
		    {
				get
		        {
					if(_RequiredDate_W == null)
	        	    {
						_RequiredDate_W = TearOff.RequiredDate;
					}
					return _RequiredDate_W;
				}
			}

			public WhereParameter ShippedDate
		    {
				get
		        {
					if(_ShippedDate_W == null)
	        	    {
						_ShippedDate_W = TearOff.ShippedDate;
					}
					return _ShippedDate_W;
				}
			}

			public WhereParameter ShipVia
		    {
				get
		        {
					if(_ShipVia_W == null)
	        	    {
						_ShipVia_W = TearOff.ShipVia;
					}
					return _ShipVia_W;
				}
			}

			public WhereParameter Freight
		    {
				get
		        {
					if(_Freight_W == null)
	        	    {
						_Freight_W = TearOff.Freight;
					}
					return _Freight_W;
				}
			}

			public WhereParameter ShipName
		    {
				get
		        {
					if(_ShipName_W == null)
	        	    {
						_ShipName_W = TearOff.ShipName;
					}
					return _ShipName_W;
				}
			}

			public WhereParameter ShipAddress
		    {
				get
		        {
					if(_ShipAddress_W == null)
	        	    {
						_ShipAddress_W = TearOff.ShipAddress;
					}
					return _ShipAddress_W;
				}
			}

			public WhereParameter ShipCity
		    {
				get
		        {
					if(_ShipCity_W == null)
	        	    {
						_ShipCity_W = TearOff.ShipCity;
					}
					return _ShipCity_W;
				}
			}

			public WhereParameter ShipRegion
		    {
				get
		        {
					if(_ShipRegion_W == null)
	        	    {
						_ShipRegion_W = TearOff.ShipRegion;
					}
					return _ShipRegion_W;
				}
			}

			public WhereParameter ShipPostalCode
		    {
				get
		        {
					if(_ShipPostalCode_W == null)
	        	    {
						_ShipPostalCode_W = TearOff.ShipPostalCode;
					}
					return _ShipPostalCode_W;
				}
			}

			public WhereParameter ShipCountry
		    {
				get
		        {
					if(_ShipCountry_W == null)
	        	    {
						_ShipCountry_W = TearOff.ShipCountry;
					}
					return _ShipCountry_W;
				}
			}

			private WhereParameter _OrderID_W = null;
			private WhereParameter _CustomerID_W = null;
			private WhereParameter _EmployeeID_W = null;
			private WhereParameter _OrderDate_W = null;
			private WhereParameter _RequiredDate_W = null;
			private WhereParameter _ShippedDate_W = null;
			private WhereParameter _ShipVia_W = null;
			private WhereParameter _Freight_W = null;
			private WhereParameter _ShipName_W = null;
			private WhereParameter _ShipAddress_W = null;
			private WhereParameter _ShipCity_W = null;
			private WhereParameter _ShipRegion_W = null;
			private WhereParameter _ShipPostalCode_W = null;
			private WhereParameter _ShipCountry_W = null;

			public void WhereClauseReset()
			{
				_OrderID_W = null;
				_CustomerID_W = null;
				_EmployeeID_W = null;
				_OrderDate_W = null;
				_RequiredDate_W = null;
				_ShippedDate_W = null;
				_ShipVia_W = null;
				_Freight_W = null;
				_ShipName_W = null;
				_ShipAddress_W = null;
				_ShipCity_W = null;
				_ShipRegion_W = null;
				_ShipPostalCode_W = null;
				_ShipCountry_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CustomerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CustomerID, Parameters.CustomerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmployeeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmployeeID, Parameters.EmployeeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderDate, Parameters.OrderDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequiredDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequiredDate, Parameters.RequiredDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShippedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShippedDate, Parameters.ShippedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipVia
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipVia, Parameters.ShipVia);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Freight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Freight, Parameters.Freight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipName, Parameters.ShipName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipAddress, Parameters.ShipAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipCity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipCity, Parameters.ShipCity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipRegion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipRegion, Parameters.ShipRegion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipPostalCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipPostalCode, Parameters.ShipPostalCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShipCountry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShipCountry, Parameters.ShipCountry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter CustomerID
		    {
				get
		        {
					if(_CustomerID_W == null)
	        	    {
						_CustomerID_W = TearOff.CustomerID;
					}
					return _CustomerID_W;
				}
			}

			public AggregateParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public AggregateParameter OrderDate
		    {
				get
		        {
					if(_OrderDate_W == null)
	        	    {
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public AggregateParameter RequiredDate
		    {
				get
		        {
					if(_RequiredDate_W == null)
	        	    {
						_RequiredDate_W = TearOff.RequiredDate;
					}
					return _RequiredDate_W;
				}
			}

			public AggregateParameter ShippedDate
		    {
				get
		        {
					if(_ShippedDate_W == null)
	        	    {
						_ShippedDate_W = TearOff.ShippedDate;
					}
					return _ShippedDate_W;
				}
			}

			public AggregateParameter ShipVia
		    {
				get
		        {
					if(_ShipVia_W == null)
	        	    {
						_ShipVia_W = TearOff.ShipVia;
					}
					return _ShipVia_W;
				}
			}

			public AggregateParameter Freight
		    {
				get
		        {
					if(_Freight_W == null)
	        	    {
						_Freight_W = TearOff.Freight;
					}
					return _Freight_W;
				}
			}

			public AggregateParameter ShipName
		    {
				get
		        {
					if(_ShipName_W == null)
	        	    {
						_ShipName_W = TearOff.ShipName;
					}
					return _ShipName_W;
				}
			}

			public AggregateParameter ShipAddress
		    {
				get
		        {
					if(_ShipAddress_W == null)
	        	    {
						_ShipAddress_W = TearOff.ShipAddress;
					}
					return _ShipAddress_W;
				}
			}

			public AggregateParameter ShipCity
		    {
				get
		        {
					if(_ShipCity_W == null)
	        	    {
						_ShipCity_W = TearOff.ShipCity;
					}
					return _ShipCity_W;
				}
			}

			public AggregateParameter ShipRegion
		    {
				get
		        {
					if(_ShipRegion_W == null)
	        	    {
						_ShipRegion_W = TearOff.ShipRegion;
					}
					return _ShipRegion_W;
				}
			}

			public AggregateParameter ShipPostalCode
		    {
				get
		        {
					if(_ShipPostalCode_W == null)
	        	    {
						_ShipPostalCode_W = TearOff.ShipPostalCode;
					}
					return _ShipPostalCode_W;
				}
			}

			public AggregateParameter ShipCountry
		    {
				get
		        {
					if(_ShipCountry_W == null)
	        	    {
						_ShipCountry_W = TearOff.ShipCountry;
					}
					return _ShipCountry_W;
				}
			}

			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _CustomerID_W = null;
			private AggregateParameter _EmployeeID_W = null;
			private AggregateParameter _OrderDate_W = null;
			private AggregateParameter _RequiredDate_W = null;
			private AggregateParameter _ShippedDate_W = null;
			private AggregateParameter _ShipVia_W = null;
			private AggregateParameter _Freight_W = null;
			private AggregateParameter _ShipName_W = null;
			private AggregateParameter _ShipAddress_W = null;
			private AggregateParameter _ShipCity_W = null;
			private AggregateParameter _ShipRegion_W = null;
			private AggregateParameter _ShipPostalCode_W = null;
			private AggregateParameter _ShipCountry_W = null;

			public void AggregateClauseReset()
			{
				_OrderID_W = null;
				_CustomerID_W = null;
				_EmployeeID_W = null;
				_OrderDate_W = null;
				_RequiredDate_W = null;
				_ShippedDate_W = null;
				_ShipVia_W = null;
				_Freight_W = null;
				_ShipName_W = null;
				_ShipAddress_W = null;
				_ShipCity_W = null;
				_ShipRegion_W = null;
				_ShipPostalCode_W = null;
				_ShipCountry_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrdersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.OrderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrdersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrdersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CustomerID);
			p.SourceColumn = ColumnNames.CustomerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EmployeeID);
			p.SourceColumn = ColumnNames.EmployeeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderDate);
			p.SourceColumn = ColumnNames.OrderDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequiredDate);
			p.SourceColumn = ColumnNames.RequiredDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShippedDate);
			p.SourceColumn = ColumnNames.ShippedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipVia);
			p.SourceColumn = ColumnNames.ShipVia;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Freight);
			p.SourceColumn = ColumnNames.Freight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipName);
			p.SourceColumn = ColumnNames.ShipName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipAddress);
			p.SourceColumn = ColumnNames.ShipAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipCity);
			p.SourceColumn = ColumnNames.ShipCity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipRegion);
			p.SourceColumn = ColumnNames.ShipRegion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipPostalCode);
			p.SourceColumn = ColumnNames.ShipPostalCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShipCountry);
			p.SourceColumn = ColumnNames.ShipCountry;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
