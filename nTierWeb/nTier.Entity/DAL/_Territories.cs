
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace nTier.Entity
{
	public abstract class _Territories : SqlClientEntity
	{
		public _Territories()
		{
			this.QuerySource = "Territories";
			this.MappingName = "Territories";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TerritoriesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string TerritoryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TerritoryID, TerritoryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TerritoriesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TerritoryID
			{
				get
				{
					return new SqlParameter("@TerritoryID", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter TerritoryDescription
			{
				get
				{
					return new SqlParameter("@TerritoryDescription", SqlDbType.NChar, 50);
				}
			}
			
			public static SqlParameter RegionID
			{
				get
				{
					return new SqlParameter("@RegionID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TerritoryID = "TerritoryID";
            public const string TerritoryDescription = "TerritoryDescription";
            public const string RegionID = "RegionID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TerritoryID] = _Territories.PropertyNames.TerritoryID;
					ht[TerritoryDescription] = _Territories.PropertyNames.TerritoryDescription;
					ht[RegionID] = _Territories.PropertyNames.RegionID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TerritoryID = "TerritoryID";
            public const string TerritoryDescription = "TerritoryDescription";
            public const string RegionID = "RegionID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TerritoryID] = _Territories.ColumnNames.TerritoryID;
					ht[TerritoryDescription] = _Territories.ColumnNames.TerritoryDescription;
					ht[RegionID] = _Territories.ColumnNames.RegionID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TerritoryID = "s_TerritoryID";
            public const string TerritoryDescription = "s_TerritoryDescription";
            public const string RegionID = "s_RegionID";

		}
		#endregion		
		
		#region Properties
	
		public virtual string TerritoryID
	    {
			get
	        {
				return base.Getstring(ColumnNames.TerritoryID);
			}
			set
	        {
				base.Setstring(ColumnNames.TerritoryID, value);
			}
		}

		public virtual string TerritoryDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.TerritoryDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.TerritoryDescription, value);
			}
		}

		public virtual int? RegionID
	    {
			get
	        {
				return base.Getint(ColumnNames.RegionID);
			}
			set
	        {
				base.Setint(ColumnNames.RegionID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TerritoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TerritoryID) ? string.Empty : base.GetstringAsString(ColumnNames.TerritoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TerritoryID);
				else
					this.TerritoryID = base.SetstringAsString(ColumnNames.TerritoryID, value);
			}
		}

		public virtual string s_TerritoryDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TerritoryDescription) ? string.Empty : base.GetstringAsString(ColumnNames.TerritoryDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TerritoryDescription);
				else
					this.TerritoryDescription = base.SetstringAsString(ColumnNames.TerritoryDescription, value);
			}
		}

		public virtual string s_RegionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegionID) ? string.Empty : base.GetintAsString(ColumnNames.RegionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegionID);
				else
					this.RegionID = base.SetintAsString(ColumnNames.RegionID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TerritoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TerritoryID, Parameters.TerritoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TerritoryDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TerritoryDescription, Parameters.TerritoryDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegionID, Parameters.RegionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TerritoryID
		    {
				get
		        {
					if(_TerritoryID_W == null)
	        	    {
						_TerritoryID_W = TearOff.TerritoryID;
					}
					return _TerritoryID_W;
				}
			}

			public WhereParameter TerritoryDescription
		    {
				get
		        {
					if(_TerritoryDescription_W == null)
	        	    {
						_TerritoryDescription_W = TearOff.TerritoryDescription;
					}
					return _TerritoryDescription_W;
				}
			}

			public WhereParameter RegionID
		    {
				get
		        {
					if(_RegionID_W == null)
	        	    {
						_RegionID_W = TearOff.RegionID;
					}
					return _RegionID_W;
				}
			}

			private WhereParameter _TerritoryID_W = null;
			private WhereParameter _TerritoryDescription_W = null;
			private WhereParameter _RegionID_W = null;

			public void WhereClauseReset()
			{
				_TerritoryID_W = null;
				_TerritoryDescription_W = null;
				_RegionID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TerritoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TerritoryID, Parameters.TerritoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TerritoryDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TerritoryDescription, Parameters.TerritoryDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegionID, Parameters.RegionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TerritoryID
		    {
				get
		        {
					if(_TerritoryID_W == null)
	        	    {
						_TerritoryID_W = TearOff.TerritoryID;
					}
					return _TerritoryID_W;
				}
			}

			public AggregateParameter TerritoryDescription
		    {
				get
		        {
					if(_TerritoryDescription_W == null)
	        	    {
						_TerritoryDescription_W = TearOff.TerritoryDescription;
					}
					return _TerritoryDescription_W;
				}
			}

			public AggregateParameter RegionID
		    {
				get
		        {
					if(_RegionID_W == null)
	        	    {
						_RegionID_W = TearOff.RegionID;
					}
					return _RegionID_W;
				}
			}

			private AggregateParameter _TerritoryID_W = null;
			private AggregateParameter _TerritoryDescription_W = null;
			private AggregateParameter _RegionID_W = null;

			public void AggregateClauseReset()
			{
				_TerritoryID_W = null;
				_TerritoryDescription_W = null;
				_RegionID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TerritoriesInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TerritoriesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TerritoriesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TerritoryID);
			p.SourceColumn = ColumnNames.TerritoryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TerritoryID);
			p.SourceColumn = ColumnNames.TerritoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TerritoryDescription);
			p.SourceColumn = ColumnNames.TerritoryDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegionID);
			p.SourceColumn = ColumnNames.RegionID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
